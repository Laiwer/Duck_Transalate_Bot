from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types.message import Message
from loader import dp, dbBot
from aiogram.utils.markdown import text, hbold
from keyboards.default.choiLangKeyboard import choiLang, choiceLanguage
from states.choiLangFrom import langFrom
from states.choiLangTo import langTo
from keyboards.default.mainKeyboard import mainKeyboard
from data.dict_lang import Lang


@dp.message_handler(Text(equals=["üëÖ–í—ã–±–æ—Ä —è–∑—ã–∫–∞üëÖ"]))
async def choiceLang(message: Message):
    await message.answer(text=text("–ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫: ", hbold(dbBot.get_languages(message.from_user.id, language="f")), "\n–ü–µ—Ä–µ–≤–æ–¥–∏–º—ã–π —è–∑—ã–∫: ", hbold(db.get_languages(message.from_user.id, language="t")), reply_markup=choiLang))


@dp.message_handler(Text(equals=["‚úî–ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫üëÖ"]))
async def setFromLang1(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è —è–∑—ã–∫–æ–≤: ", reply_markup=choiceLanguage)

    await langFrom.Q1.set()


@dp.message_handler(state=langFrom.Q1)
async def setFromLang2(message: Message, state: FSMContext):
    if message.text in list(Lang.keys()):
        db.set_languages(message.from_user.id, from_lang=message.text, to_lang=None)

        await message.answer(text="–ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=choiLang)
        await state.finish()
    else:
        await message.answer(text="–ù–∞—á–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=choiLang)


@dp.message_handler(Text(equals=["üîÑ–ü–µ—Ä–µ–≤–æ–¥–∏–º—ã–π —è–∑—ã–∫üëÖ"]))
async def setToLang1(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è —è–∑—ã–∫–æ–≤: ", reply_markup=choiceLanguage)
    await langTo.Q1.set()


@dp.message_handler(state=langTo.Q1)
async def setToLang2(message: Message, state: FSMContext):
    if message.text in list(Lang.keys()):
        db.set_languages(message.from_user.id, from_lang=None, to_lang=message.text)

        await message.answer(text="–ü–µ—Ä–µ–≤–æ–¥–∏–º—ã–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=choiLang)
        await state.finish()
    else:
        await message.answer(text="–ü–µ—Ä–µ–≤–æ–¥–∏–º—ã–π —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=choiLang)


@dp.message_handler(Text(equals=["‚ùå–û—Ç–º–µ–Ω–∞‚ùå"]))
async def cancelSetLang(message: Message):
    await message.answer(text="–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞", reply_markup=mainKeyboard)